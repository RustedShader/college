#include <stdio.h>

int fac(int n){
    if (n == 0 ){
        return 1;
    }
    return n * fac(n-1);
}

int main(){
printf("%d\n",fac(5));
}
#include <stdio.h>

int gcd(int num1,int num2){
    int greater ;
    int smaller ;
    if (num1 > num2){
        greater = num1;
        smaller = num2;

    }
    else{
        greater = num2;
        smaller = num1;
    }

    if (greater  % smaller == 0){
        return smaller;
    }
    else{
        int k = greater % smaller ;
        return gcd(greater,k);
    }
}

int main(){
printf("%d\n",gcd(15,18));
}
#include <stdio.h>
/* recursive fib without dp */
int fib(int a){
    if ( a == 0){
        return 0;
    }
    if ( a== 1){
        return 1;
    }
    return fib(a-1) + fib(a-2);
}

int main(){
    printf("%d\n",fib(7));
}
#include <stdio.h>

int ISPRIME(int a ){
    for(int i = 2  ; i < a ; i++){
        if (a%i == 0){
            return -1;
        }
    }
    return 1;
}

int main(){
    int start;
    int end;
    printf("enter the starting range: ");
    scanf("%d",&start);
    printf("enter the ending range: ");
    scanf("%d",&end);
    for (int i = start ; i <=end ; i ++){
        if(ISPRIME(i) == -1){
            printf("%d is not prime\n",i);
        }
        else{
            printf("%d is prime\n",i);
        }
    }
    return 0;
}
#include <stdio.h>

char* rev_string(char a[]){
    int i = 0;
    int string_len = 0;
    while(a[i] != '\0'){
        string_len += 1;
        i++;
    }
    int m = string_len / 2;
    for(int i = 0 , k = string_len-1 ; i <= m ; i++ , k--){
        char temp = a[i];
        a[i] = a[k];
        a[k] = temp;
    }
    return a;
}

int main(){
    char x[] = "shubhang";
    printf("%s", rev_string(x));
}
