#include <stdio.h>

int fac(int x){
    int z = 1;
   for(int i =1 ; i<=x;i++){
       z*=i;
   }
    return z;
}

int main(){
    int z = fac(5);
    printf("%d\n",z);
}
#include <stdio.h>

int gcd(int a , int b){
    int max_num;
    if (a>b){
        max_num = a;
    }
    else if (b<a){
        max_num = b;
    }
    else{
        max_num = a;
    }

    int max = 1;
    for(int i =1 ; i<=max_num;i++){
        if (a%i == 0 && b%i== 0 ){
            if (i > max){
                max = i;
            }
        }
    }
    return max;
}

int main(){
    int a = 36;
    int b = 60;

    printf("%d\n",gcd(a,b));
}
#include <stdio.h>

int p_is_not(int a){
    int count = 0;
    for(int i = 2; i<a;i++){
        if(a%i == 0){
            count++;
        }
    }
    if (count > 0 ){
        return -1;
    }
    else{
        return 1;
    }
}

int main(){
int z = p_is_not(6);
if (z>0){
    printf("prime\n");
}
else{
    printf("not prime\n");
}
return 0;
}
#include <stdio.h>

/* 0 1 2 3 5 8 13 21 */
int fib(int a){
    if ( a == 1){
        return 1;
    }
    if ( a == 0){
        return 0;
    }
    return fib(a-1) + fib(a-2);
}
int main(){

    printf("%d",fib(3));

}
#include <stdio.h>

int arr_sum(int arr[],int n){
    int sum = 0;
    for(int i = 0 ; i<n ; i++){
        sum+=arr[i];
    }
    return sum;
}


int main(){
    int arr[5] = {1,2,3,4,5};
    printf("%d\n",arr_sum(arr, 5));
}
#include <stdio.h>
#include <string.h>

char* rev_string(char str[]){
    int n = strlen(str);
    /* or we can use while string last char is not equal to \0 */
    int m =  n/2;
    for (int i = 0 , z = n-1; i<m ; i++ , z--){
        char temp = str[i];
        str[i] = str[z];
        str[z] = temp;
    }
    return str;
}

int main(){
    char x[] = "arnav";
    printf("%s\n",rev_string(x));
}
#include <stdio.h>

/* row * column  */


int* arr_mult(int arr1[] , int arr2[] , int a1 , int a2 , int b1 , int b2 ){
    int C[m][p];

    // Perform matrix multiplication
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < p; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main(){

}
#include <stdio.h>

int fac(int x){
    int z = 1;
   for(int i =1 ; i<=x;i++){
       z*=i;
   }
    return z;
}

int main(){
    int z = fac(5);
    printf("%d\n",z);
}
#include <stdio.h>

int gcd(int a , int b){
    int max_num;
    if (a>b){
        max_num = a;
    }
    else if (b<a){
        max_num = b;
    }
    else{
        max_num = a;
    }

    int max = 1;
    for(int i =1 ; i<=max_num;i++){
        if (a%i == 0 && b%i== 0 ){
            if (i > max){
                max = i;
            }
        }
    }
    return max;
}

int main(){
    int a = 36;
    int b = 60;

    printf("%d\n",gcd(a,b));
}
#include <stdio.h>

int p_is_not(int a){
    int count = 0;
    for(int i = 2; i<a;i++){
        if(a%i == 0){
            count++;
        }
    }
    if (count > 0 ){
        return -1;
    }
    else{
        return 1;
    }
}

int main(){
int z = p_is_not(6);
if (z>0){
    printf("prime\n");
}
else{
    printf("not prime\n");
}
return 0;
}
#include <stdio.h>

/* 0 1 2 3 5 8 13 21 */
int fib(int a){
    if ( a == 1){
        return 1;
    }
    if ( a == 0){
        return 0;
    }
    return fib(a-1) + fib(a-2);
}
int main(){

    printf("%d",fib(3));

}
#include <stdio.h>

int arr_sum(int arr[],int n){
    int sum = 0;
    for(int i = 0 ; i<n ; i++){
        sum+=arr[i];
    }
    return sum;
}


int main(){
    int arr[5] = {1,2,3,4,5};
    printf("%d\n",arr_sum(arr, 5));
}
#include <stdio.h>
#include <string.h>

char* rev_string(char str[]){
    int n = strlen(str);
    int m =  n/2;
    for (int i = 0 , z = n-1; i<=m ; i++ , z--){
        char temp = str[i];
        str[i] = str[z];
        str[z] = temp;
    }
    return str;
}

int main(){
    char x[] = "arnav";
    printf("%s\n",rev_string(x));
}
#include <stdio.h>

/* row * column  */


void arr_mult(int arr1[3][3] , int arr2[3][3] , int r1 , int r2 , int c1 , int c2 ,int result[3][3]){

    // Perform matrix multiplication
    for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c2; j++) {
                result[i][j] = 0;
            }
        }

        // Perform matrix multiplication
        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c2; j++) {
                for (int k = 0; k < c1; k++) {
                    result[i][j] += arr1[i][k] * arr2[k][j];
                }
            }
        }
}

int main(){

    int a[3][3] = {{1,2,3},{1,2,3},{1,2,3}};
    int b[3][3] = {{1,2,3},{1,2,3},{1,2,3}};
    int c[3][3];
    arr_mult(a,b,3,3,3,3,c);
    for(int i = 0 ; i<3 ; i++){
        for (int k = 0 ; k < 3 ; k++){
            printf("%d\n",c[i][k]);
        }
    }
}
